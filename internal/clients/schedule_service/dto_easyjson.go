// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package schedule

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson56de76c1DecodeAPIGatewayInternalClientsScheduleService(in *jlexer.Lexer, out *SetWeeklyScheduleReq) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "filename":
			out.Filename = string(in.String())
		case "sheet":
			out.Sheet = string(in.String())
		case "file_data":
			if in.IsNull() {
				in.Skip()
				out.FileData = nil
			} else {
				out.FileData = in.Bytes()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeAPIGatewayInternalClientsScheduleService(out *jwriter.Writer, in SetWeeklyScheduleReq) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"filename\":"
		out.RawString(prefix[1:])
		out.String(string(in.Filename))
	}
	{
		const prefix string = ",\"sheet\":"
		out.RawString(prefix)
		out.String(string(in.Sheet))
	}
	{
		const prefix string = ",\"file_data\":"
		out.RawString(prefix)
		out.Base64Bytes(in.FileData)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SetWeeklyScheduleReq) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeAPIGatewayInternalClientsScheduleService(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SetWeeklyScheduleReq) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeAPIGatewayInternalClientsScheduleService(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SetWeeklyScheduleReq) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeAPIGatewayInternalClientsScheduleService(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SetWeeklyScheduleReq) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeAPIGatewayInternalClientsScheduleService(l, v)
}
func easyjson56de76c1DecodeAPIGatewayInternalClientsScheduleService1(in *jlexer.Lexer, out *SetHomeworkReq) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "date":
			out.Date = string(in.String())
		case "classname":
			out.Classname = string(in.String())
		case "homework":
			out.Homework = string(in.String())
		case "lesson_name":
			out.LessonName = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeAPIGatewayInternalClientsScheduleService1(out *jwriter.Writer, in SetHomeworkReq) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"date\":"
		out.RawString(prefix[1:])
		out.String(string(in.Date))
	}
	{
		const prefix string = ",\"classname\":"
		out.RawString(prefix)
		out.String(string(in.Classname))
	}
	{
		const prefix string = ",\"homework\":"
		out.RawString(prefix)
		out.String(string(in.Homework))
	}
	{
		const prefix string = ",\"lesson_name\":"
		out.RawString(prefix)
		out.String(string(in.LessonName))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SetHomeworkReq) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeAPIGatewayInternalClientsScheduleService1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SetHomeworkReq) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeAPIGatewayInternalClientsScheduleService1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SetHomeworkReq) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeAPIGatewayInternalClientsScheduleService1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SetHomeworkReq) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeAPIGatewayInternalClientsScheduleService1(l, v)
}
